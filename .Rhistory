library(dplyr)
library(ggplot2)
library(ggrepel)
library(magrittr)
library(ggpubr)
source('load_data.R')
library(dplyr)
library(ggplot2)
library(ggrepel)
library(magrittr)
library(ggpubr)
source('load_data.R')
library(dplyr)
library(ggplot2)
library(ggrepel)
library(magrittr)
library(ggpubr)
library(data.table)
source('load_data.R')
CCLE.expression <- load_gene_expression()
for_plot <- left_join(data.frame(CCLE.expression[,"TRIM8 (81603)",drop=F]) %>% dplyr::mutate(CCLE_name = rownames(.)), mf, by = "CCLE_name") %>%
group_by(Type) %>%
dplyr::mutate(n = n()) %>%
dplyr::mutate(Type_color = ifelse(Type == "Ewing", "red", "gray"))
p <- ggplot(for_plot %>% filter(n >= 5), aes(x = reorder(Type, TRIM8..81603., FUN = median), y = TRIM8..81603., fill = Type_color)) +
geom_jitter(alpha = 0.5, width = 0.1) +
geom_boxplot() +
xlab("Tumor type") + ylab("TRIM8 expression (log2(TPM + 1))") +
scale_fill_manual(values = c("gray" = rgb(190/255, 190/255, 190/255, 0.5), "red" = rgb(1, 0, 0, 0.5))) +
scale_color_manual(values = c("gray" = rgb(190/255, 190/255, 190/255, 0.5), "red" = rgb(1, 0, 0, 0.5))) +
theme_Publication() + theme(axis.text.x = element_text(angle = 90, hjust = 1), panel.grid = element_blank(), legend.position = "none")
library(dplyr)
library(ggplot2)
library(ggrepel)
library(magrittr)
library(ggpubr)
library(data.table)
source('load_data.R')
CCLE.expression <- load_gene_expression()
for_plot <- left_join(data.frame(CCLE.expression[,"TRIM8 (81603)",drop=F]) %>% dplyr::mutate(CCLE_name = rownames(.)), mf, by = "CCLE_name") %>%
group_by(Type) %>%
dplyr::mutate(n = n()) %>%
dplyr::mutate(Type_color = ifelse(Type == "Ewing", "red", "gray"))
p <- ggplot(for_plot %>% filter(n >= 5), aes(x = reorder(Type, TRIM8..81603., FUN = median), y = TRIM8..81603., fill = Type_color)) +
geom_jitter(alpha = 0.5, width = 0.1) +
geom_boxplot() +
xlab("Tumor type") + ylab("TRIM8 expression (log2(TPM + 1))") +
scale_fill_manual(values = c("gray" = rgb(190/255, 190/255, 190/255, 0.5), "red" = rgb(1, 0, 0, 0.5))) +
scale_color_manual(values = c("gray" = rgb(190/255, 190/255, 190/255, 0.5), "red" = rgb(1, 0, 0, 0.5))) +
theme_Publication() + theme(axis.text.x = element_text(angle = 90, hjust = 1), panel.grid = element_blank(), legend.position = "none")
library(dplyr)
library(ggplot2)
library(ggrepel)
library(magrittr)
library(ggpubr)
library(data.table)
library(ggthemes)
source('load_data.R')
CCLE.expression <- load_gene_expression()
library(dplyr)
library(ggplot2)
library(magrittr)
library(ggpubr)
library(data.table)
library(ggthemes)
source('load_data.R')
CCLE.expression <- load_gene_expression()
for_plot <- left_join(data.frame(CCLE.expression[,"TRIM8 (81603)",drop=F]) %>% dplyr::mutate(CCLE_name = rownames(.)), mf, by = "CCLE_name") %>%
group_by(Type) %>%
dplyr::mutate(n = n()) %>%
dplyr::mutate(Type_color = ifelse(Type == "Ewing", "red", "gray"))
p <- ggplot(for_plot %>% filter(n >= 5), aes(x = reorder(Type, TRIM8..81603., FUN = median), y = TRIM8..81603., fill = Type_color)) +
geom_jitter(alpha = 0.5, width = 0.1) +
geom_boxplot() +
xlab("Tumor type") + ylab("TRIM8 expression (log2(TPM + 1))") +
scale_fill_manual(values = c("gray" = rgb(190/255, 190/255, 190/255, 0.5), "red" = rgb(1, 0, 0, 0.5))) +
scale_color_manual(values = c("gray" = rgb(190/255, 190/255, 190/255, 0.5), "red" = rgb(1, 0, 0, 0.5))) +
theme_Publication() + theme(axis.text.x = element_text(angle = 90, hjust = 1), panel.grid = element_blank(), legend.position = "none")
p
for_plot <- left_join(data.frame(CCLE.expression[,"TRIM8 (81603)",drop=F]) %>% dplyr::mutate(CCLE_name = rownames(.)), mf, by = "DepMap_ID") %>%
group_by(Type) %>%
dplyr::mutate(n = n()) %>%
dplyr::mutate(Type_color = ifelse(Type == "Ewing", "red", "gray"))
for_plot <- left_join(data.frame(CCLE.expression[,"TRIM8 (81603)",drop=F]) %>% dplyr::mutate(DepMap_ID = rownames(.)), mf, by = "DepMap_ID") %>%
group_by(Type) %>%
dplyr::mutate(n = n()) %>%
dplyr::mutate(Type_color = ifelse(Type == "Ewing", "red", "gray"))
p <- ggplot(for_plot %>% filter(n >= 5), aes(x = reorder(Type, TRIM8..81603., FUN = median), y = TRIM8..81603., fill = Type_color)) +
geom_jitter(alpha = 0.5, width = 0.1) +
geom_boxplot() +
xlab("Tumor type") + ylab("TRIM8 expression (log2(TPM + 1))") +
scale_fill_manual(values = c("gray" = rgb(190/255, 190/255, 190/255, 0.5), "red" = rgb(1, 0, 0, 0.5))) +
scale_color_manual(values = c("gray" = rgb(190/255, 190/255, 190/255, 0.5), "red" = rgb(1, 0, 0, 0.5))) +
theme_Publication() + theme(axis.text.x = element_text(angle = 90, hjust = 1), panel.grid = element_blank(), legend.position = "none")
p
library(dplyr)
library(ggplot2)
library(magrittr)
library(ggpubr)
library(data.table)
library(ggthemes)
source('load_data.R')
CCLE.expression <- load_gene_expression()
for_plot <- left_join(data.frame(CCLE.expression[,"TRIM8 (81603)",drop=F]) %>% dplyr::mutate(DepMap_ID = rownames(.)), mf, by = "DepMap_ID") %>%
group_by(Type) %>%
dplyr::mutate(n = n()) %>%
dplyr::mutate(Type_color = ifelse(Type == "Ewing", "red", "gray"))
p <- ggplot(for_plot %>% filter(n >= 5), aes(x = reorder(Type, TRIM8..81603., FUN = median), y = TRIM8..81603., fill = Type_color)) +
geom_jitter(alpha = 0.5, width = 0.1) +
geom_boxplot() +
xlab("Tumor type") + ylab("TRIM8 expression (log2(TPM + 1))") +
scale_fill_manual(values = c("gray" = rgb(190/255, 190/255, 190/255, 0.5), "red" = rgb(1, 0, 0, 0.5))) +
scale_color_manual(values = c("gray" = rgb(190/255, 190/255, 190/255, 0.5), "red" = rgb(1, 0, 0, 0.5))) +
theme_Publication() + theme(axis.text.x = element_text(angle = 90, hjust = 1), panel.grid = element_blank(), legend.position = "none")
p
ggsave(p, filename = "figures/TRIM8_CCLE_Expression_20q1.pdf", width = 8, height = 6)
# GENE EFFECT
load_gecko_gene_effect <- function(){
if(!file.exists("data/gecko_gene_effect.csv")) # If file does not exist, download from FigShare. Otherwise load local file.
{
gecko_gene_effect <- fread(gecko_gene_effect_url)
fwrite(gecko_gene_effect, "data/gecko_gene_effect.csv")
} else
{
gecko_gene_effect <- fread("data/gecko_gene_effect.csv")
}
# Reformat as a matrix.
gecko_gene_effect %<>% dplyr::filter(V1 %in% mf$DepMap_ID)
rownames_temp <- gecko_gene_effect$V1
gecko_gene_effect <- as.matrix(gene_effect[,-1])
rownames(gecko_gene_effect) <- rownames_temp
return(gecko_gene_effect)
}
gecko <- load_gecko_gene_effect()
gecko_gene_effect_url <- "https://ndownloader.figshare.com/files/14246687"
gecko <- load_gecko_gene_effect()
gecko_gene_effect <- as.matrix(gecko_gene_effect[,-1])
# GECKO GENE EFFECT
load_gecko_gene_effect <- function(){
if(!file.exists("data/gecko_gene_effect.csv")) # If file does not exist, download from FigShare. Otherwise load local file.
{
gecko_gene_effect <- fread(gecko_gene_effect_url)
fwrite(gecko_gene_effect, "data/gecko_gene_effect.csv")
} else
{
gecko_gene_effect <- fread("data/gecko_gene_effect.csv")
}
# Reformat as a matrix.
gecko_gene_effect %<>% dplyr::filter(V1 %in% mf$DepMap_ID)
rownames_temp <- gecko_gene_effect$V1
gecko_gene_effect <- as.matrix(gecko_gene_effect[,-1])
rownames(gecko_gene_effect) <- rownames_temp
return(gecko_gene_effect)
}
gecko <- load_gecko_gene_effect()
View(gecko)
# GECKO GENE EFFECT
load_gecko_gene_effect <- function(){
if(!file.exists("data/gecko_gene_effect.csv")) # If file does not exist, download from FigShare. Otherwise load local file.
{
gecko_gene_effect <- fread(gecko_gene_effect_url)
fwrite(gecko_gene_effect, "data/gecko_gene_effect.csv")
} else
{
gecko_gene_effect <- fread("data/gecko_gene_effect.csv")
}
# Reformat as a matrix.
gecko_gene_effect %<>% dplyr::filter(V1 %in% mf$CCLE_name)
rownames_temp <- gecko_gene_effect$V1
gecko_gene_effect <- as.matrix(gecko_gene_effect[,-1])
rownames(gecko_gene_effect) <- rownames_temp
return(gecko_gene_effect)
}
gecko <- load_gecko_gene_effect()
View(gecko)
# GECKO GENE EFFECT
load_gecko_gene_effect <- function(){
if(!file.exists("data/gecko_gene_effect.csv")) # If file does not exist, download from FigShare. Otherwise load local file.
{
gecko_gene_effect <- fread(gecko_gene_effect_url)
fwrite(gecko_gene_effect, "data/gecko_gene_effect.csv")
} else
{
gecko_gene_effect <- fread("data/gecko_gene_effect.csv")
}
# Reformat as a matrix.
gecko_gene_effect %<>% dplyr::filter(V1 %in% mf$CCLE_name)
rownames_temp <- gecko_gene_effect$V1
gecko_gene_effect <- as.matrix(gecko_gene_effect[,-1])
rownames(gecko_gene_effect) <- rownames_temp
return(gecko_gene_effect)
}
gecko <- load_gecko_gene_effect()
View(gecko)
gecko_gene_effect <- fread(gecko_gene_effect_url)
View(gecko_gene_effect)
gecko_gene_effect <- t(fread(gecko_gene_effect_url))
View(gecko_gene_effect)
# Reformat as a matrix.
gecko_gene_effect %<>% dplyr::filter(V1 %in% mf$CCLE_name)
gecko_gene_effect <- fread(gecko_gene_effect_url)
View(gecko_gene_effect)
# Reformat as a matrix.
rownames_temp <- gecko_gene_effect$V1
gecko_gene_effect <- as.matrix(gecko_gene_effect[,-1])
rownames(gecko_gene_effect) <- rownames_temp
DepMap_to_CCLE <- mf$DepMap_ID
names(DepMap_to_CCLE) <- mf$CCLE_name
DepMap_to_CCLE[colnames(gecko_gene_effect)]
# GECKO GENE EFFECT
load_gecko_gene_effect <- function(){
if(!file.exists("data/gecko_gene_effect.csv")) # If file does not exist, download from FigShare. Otherwise load local file.
{
gecko_gene_effect <- fread(gecko_gene_effect_url)
fwrite(gecko_gene_effect, "data/gecko_gene_effect.csv")
} else
{
gecko_gene_effect <- fread("data/gecko_gene_effect.csv")
}
# Reformat as a matrix.
rownames_temp <- gecko_gene_effect$V1
gecko_gene_effect <- as.matrix(gecko_gene_effect[,-1])
rownames(gecko_gene_effect) <- rownames_temp
DepMap_to_CCLE <- mf$DepMap_ID
names(DepMap_to_CCLE) <- mf$CCLE_name
colnames(gecko_gene_effect) <- DepMap_to_CCLE[colnames(gecko_gene_effect)]
return(gecko_gene_effect)
}
gecko <- load_gecko_gene_effect()
View(gecko)
avana <- load_gene_effect()
head(rownames(avana))
# GECKO GENE EFFECT
load_gecko_gene_effect <- function(){
if(!file.exists("data/gecko_gene_effect.csv")) # If file does not exist, download from FigShare. Otherwise load local file.
{
gecko_gene_effect <- fread(gecko_gene_effect_url)
fwrite(gecko_gene_effect, "data/gecko_gene_effect.csv")
} else
{
gecko_gene_effect <- fread("data/gecko_gene_effect.csv")
}
# Reformat as a matrix.
rownames_temp <- gecko_gene_effect$V1
gecko_gene_effect <- as.matrix(gecko_gene_effect[,-1])
rownames(gecko_gene_effect) <- rownames_temp
DepMap_to_CCLE <- mf$DepMap_ID
names(DepMap_to_CCLE) <- mf$CCLE_name
colnames(gecko_gene_effect) <- DepMap_to_CCLE[colnames(gecko_gene_effect)]
gecko_gene_effect <- t(gecko_gene_effect)
return(gecko_gene_effect)
}
gecko <- load_gecko_gene_effect()
head(rownames(gecko))
View(gecko)
gecko <- load_gecko_gene_effect()
# GENE EFFECT
load_gene_effect <- function(){
if(!file.exists("data/gene_effect.csv")) # If file does not exist, download from FigShare. Otherwise load local file.
{
gene_effect <- fread(gene_effect_url)
fwrite(gene_effect, "data/gene_effect.csv")
} else
{
gene_effect <- fread("data/gene_effect.csv")
}
# Reformat as a matrix.
gene_effect %<>% dplyr::filter(V1 %in% mf$DepMap_ID)
rownames_temp <- gene_effect$V1
gene_effect <- as.matrix(gene_effect[,-1])
DepMap_to_CCLE <- mf$CCLE_name
names(DepMap_to_CCLE) <- mf$DepMap_ID
rownames(gene_effect) <- DepMap_to_CCLE[rownames_temp]
return(gene_effect)
}
# GECKO GENE EFFECT
load_gecko_gene_effect <- function(){
if(!file.exists("data/gecko_gene_effect.csv")) # If file does not exist, download from FigShare. Otherwise load local file.
{
gecko_gene_effect <- fread(gecko_gene_effect_url)
fwrite(gecko_gene_effect, "data/gecko_gene_effect.csv")
} else
{
gecko_gene_effect <- fread("data/gecko_gene_effect.csv")
}
# Reformat as a matrix.
rownames_temp <- gecko_gene_effect$V1
gecko_gene_effect <- as.matrix(gecko_gene_effect[,-1])
rownames(gecko_gene_effect) <- rownames_temp
gecko_gene_effect <- t(gecko_gene_effect)
return(gecko_gene_effect)
}
gecko <- load_gecko_gene_effect()
View(gecko)
avana <- load_gene_effect()
View(avana)
View(mf)
Ewing_lines <- mf %>% dplyr::filter(Type == "Ewing") %$% CCLE_name
library(dplyr)
library(ggplot2)
library(magrittr)
library(ggpubr)
library(data.table)
library(DT)
library(ggthemes)
source('load_data.R')
source('functions.R')
gecko_gene_effect <- load_gecko_gene_effect()
gene_effect <- load_gene_effect()
Ewing_lines <- mf %>% dplyr::filter(Type == "Ewing") %$% CCLE_name
# Gecko
context_matrix <- gecko_gene_effect[,1,drop=F]
colnames(context_matrix) <- "Ewing"
context_matrix[,1] <- 0
context_matrix[rownames(context_matrix) %in% Ewing_lines,1] <- 1
View(context_matrix)
ttest_Ewing_v_all <- run_lm_stats_limma(gecko_gene_effect, context_matrix[,1])
library(dplyr)
library(ggplot2)
library(magrittr)
library(ggpubr)
library(data.table)
library(DT)
library(ggthemes)
source('load_data.R')
source('functions.R')
gecko_gene_effect <- load_gecko_gene_effect()
gene_effect <- load_gene_effect()
Ewing_lines <- mf %>% dplyr::filter(Type == "Ewing") %$% CCLE_name
# Gecko
context_matrix <- gecko_gene_effect[,1,drop=F]
colnames(context_matrix) <- "Ewing"
context_matrix[,1] <- 0
context_matrix[rownames(context_matrix) %in% Ewing_lines,1] <- 1
ttest_Ewing_v_all <- run_lm_stats_limma(gecko_gene_effect, context_matrix[,1])
ttest_Ewing_v_all$Gene <- gsub("\\ .*","",ttest_Ewing_v_all$Gene)
ttest_Ewing_v_all_gecko <- ttest_Ewing_v_all
p <- ggplot(ttest_Ewing_v_all, aes(x = EffectSize, y = -log10(p.value))) +
geom_point(size=2, pch=21, stroke = 0.25, fill = "black") +
theme_light() +
theme(panel.grid = element_blank(), panel.border = element_blank(), axis.line = element_line(size=0.5),
axis.ticks = element_line(size=0.5, color="black"), text = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black"), plot.title = element_text(size = 8, color = "black")) +
xlab("Effect Size") + ylab("-log10(p-value)") +
geom_point(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "TRIM8",,drop=F],
aes(x = EffectSize, y = -log10(p.value)), fill = "red", size = 2,  pch=21, stroke = 0.25) +
geom_text_repel(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "TRIM8",,drop=F],
aes(x = EffectSize, y = -log10(p.value), label = Gene),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
geom_point(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "FLI1",,drop=F],
aes(x = EffectSize, y = -log10(p.value)), fill = "#00aeef", size = 2,  pch=21, stroke = 0.25) +
geom_text_repel(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "FLI1",,drop=F],
aes(x = EffectSize, y = -log10(p.value), label = Gene),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
ggtitle("GeCKO: Ewing v all others") + scale_x_continuous(breaks = round(seq(-0.9, 0.9, 0.3),2))
p <- ggplot(ttest_Ewing_v_all, aes(x = EffectSize, y = -log10(q.value))) +
geom_point(size=2, pch=21, stroke = 0.25, fill = "black") +
theme_light() + theme(panel.grid = element_blank(), panel.border = element_blank(), axis.line = element_line(size=0.5),
axis.ticks = element_line(size=0.5, color="black"), text = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black"), plot.title = element_text(size = 8, color = "black")) +
xlab("Effect Size") + ylab("-log10(q-value)") +
geom_point(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "TRIM8",,drop=F],
aes(x = EffectSize, y = -log10(q.value)), fill = "red", size = 2,  pch=21, stroke = 0.25) +
geom_text_repel(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "TRIM8",,drop=F],
aes(x = EffectSize, y = -log10(q.value), label = Gene),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
geom_point(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "FLI1",,drop=F],
aes(x = EffectSize, y = -log10(q.value)), fill = "#00aeef", size = 2,  pch=21, stroke = 0.25) +
geom_text_repel(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "FLI1",,drop=F],
aes(x = EffectSize, y = -log10(q.value), label = Gene),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
ggtitle("GeCKO: Ewing v all others") + scale_x_continuous(breaks = round(seq(-0.9, 0.9, 0.3),2))
library(dplyr)
library(ggplot2)
library(ggrepel)
library(ggpubr)
library(ggthemes)
library(magrittr)
library(data.table)
library(DT)
source('load_data.R')
source('functions.R')
gecko_gene_effect <- load_gecko_gene_effect()
gene_effect <- load_gene_effect()
Ewing_lines <- mf %>% dplyr::filter(Type == "Ewing") %$% CCLE_name
# Gecko
context_matrix <- gecko_gene_effect[,1,drop=F]
colnames(context_matrix) <- "Ewing"
context_matrix[,1] <- 0
context_matrix[rownames(context_matrix) %in% Ewing_lines,1] <- 1
ttest_Ewing_v_all <- run_lm_stats_limma(gecko_gene_effect, context_matrix[,1])
ttest_Ewing_v_all$Gene <- gsub("\\ .*","",ttest_Ewing_v_all$Gene)
ttest_Ewing_v_all_gecko <- ttest_Ewing_v_all
p <- ggplot(ttest_Ewing_v_all, aes(x = EffectSize, y = -log10(p.value))) +
geom_point(size=2, pch=21, stroke = 0.25, fill = "black") +
theme_light() +
theme(panel.grid = element_blank(), panel.border = element_blank(), axis.line = element_line(size=0.5),
axis.ticks = element_line(size=0.5, color="black"), text = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black"), plot.title = element_text(size = 8, color = "black")) +
xlab("Effect Size") + ylab("-log10(p-value)") +
geom_point(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "TRIM8",,drop=F],
aes(x = EffectSize, y = -log10(p.value)), fill = "red", size = 2,  pch=21, stroke = 0.25) +
geom_text_repel(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "TRIM8",,drop=F],
aes(x = EffectSize, y = -log10(p.value), label = Gene),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
geom_point(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "FLI1",,drop=F],
aes(x = EffectSize, y = -log10(p.value)), fill = "#00aeef", size = 2,  pch=21, stroke = 0.25) +
geom_text_repel(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "FLI1",,drop=F],
aes(x = EffectSize, y = -log10(p.value), label = Gene),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
ggtitle("GeCKO: Ewing v all others") + scale_x_continuous(breaks = round(seq(-0.9, 0.9, 0.3),2))
p
p
p <- ggplot(ttest_Ewing_v_all, aes(x = EffectSize, y = -log10(q.value))) +
geom_point(size=2, pch=21, stroke = 0.25, fill = "black") +
theme_light() + theme(panel.grid = element_blank(), panel.border = element_blank(), axis.line = element_line(size=0.5),
axis.ticks = element_line(size=0.5, color="black"), text = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black"), plot.title = element_text(size = 8, color = "black")) +
xlab("Effect Size") + ylab("-log10(q-value)") +
geom_point(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "TRIM8",,drop=F],
aes(x = EffectSize, y = -log10(q.value)), fill = "red", size = 2,  pch=21, stroke = 0.25) +
geom_text_repel(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "TRIM8",,drop=F],
aes(x = EffectSize, y = -log10(q.value), label = Gene),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
geom_point(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "FLI1",,drop=F],
aes(x = EffectSize, y = -log10(q.value)), fill = "#00aeef", size = 2,  pch=21, stroke = 0.25) +
geom_text_repel(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "FLI1",,drop=F],
aes(x = EffectSize, y = -log10(q.value), label = Gene),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
ggtitle("GeCKO: Ewing v all others") + scale_x_continuous(breaks = round(seq(-0.9, 0.9, 0.3),2))
p
gecko_gene_effect <- load_gecko_gene_effect()
library(taigr)
gene.effect.gecko <- load.from.taiga(data.name='gecko-public-tentative-18q1-4213', data.version=1, data.file='gene_effect')
View(gene.effect.gecko)
View(gecko_gene_effect)
p <- ggplot(ttest_Ewing_v_all, aes(x = EffectSize, y = -log10(q.value))) +
geom_point(size=2, pch=21, stroke = 0.25, fill = "black") +
theme_light() + theme(panel.grid = element_blank(), panel.border = element_blank(), axis.line = element_line(size=0.5),
axis.ticks = element_line(size=0.5, color="black"), text = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black"), plot.title = element_text(size = 8, color = "black")) +
xlab("Effect Size") + ylab("-log10(q-value)") +
geom_point(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "TRIM8",,drop=F],
aes(x = EffectSize, y = -log10(q.value)), fill = "red", size = 2,  pch=21, stroke = 0.25) +
geom_text_repel(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "TRIM8",,drop=F],
aes(x = EffectSize, y = -log10(q.value), label = Gene),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
geom_point(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "FLI1",,drop=F],
aes(x = EffectSize, y = -log10(q.value)), fill = "#00aeef", size = 2,  pch=21, stroke = 0.25) +
geom_text_repel(data = ttest_Ewing_v_all[ttest_Ewing_v_all$Gene == "FLI1",,drop=F],
aes(x = EffectSize, y = -log10(q.value), label = Gene),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
ggtitle("GeCKO: Ewing v all others") + scale_x_continuous(breaks = round(seq(-0.9, 0.9, 0.3),2))
p
LFC_Rep1_GFP <- read.table("~/Dropbox (Partners HealthCare)/Projects/2020 - TRIM8 in Ewing - Alex Seong/TRIM8 - RNAseq tpm data, proteomics data, plots/TRIM8 Flow Screen/LFC_Rep_1;GFP__;Day_7_sort_-pre-sort_100_18-06-09-07-44.txt", header = T, sep = "\t", stringsAsFactors = F)
LFC_Rep2_GFP <- read.table("~/Dropbox (Partners HealthCare)/Projects/2020 - TRIM8 in Ewing - Alex Seong/TRIM8 - RNAseq tpm data, proteomics data, plots/TRIM8 Flow Screen/LFC_Rep_2;GFP__;Day_7_sort_-pre-sort_100_18-06-09-07-47.txt", header = T, sep = "\t", stringsAsFactors = F)
LFC_Rep1_mCherry <- read.table("~/Dropbox (Partners HealthCare)/Projects/2020 - TRIM8 in Ewing - Alex Seong/TRIM8 - RNAseq tpm data, proteomics data, plots/TRIM8 Flow Screen/LFC_Rep_1;mCherry_;Day_7_sort_-pre-sort_100_18-06-09-07-43.txt", header = T, sep = "\t", stringsAsFactors = F)
LFC_Rep2_mCherry <- read.table("~/Dropbox (Partners HealthCare)/Projects/2020 - TRIM8 in Ewing - Alex Seong/TRIM8 - RNAseq tpm data, proteomics data, plots/TRIM8 Flow Screen/LFC_Rep_2;mCherry_;Day_7_sort_-pre-sort_100_18-06-09-07-46.txt", header = T, sep = "\t", stringsAsFactors = F)
p <- ggplot(LFC_Rep1_GFP, aes(x = Average.LFC, y = Average..log.p.values.)) + geom_point(size=2, pch=21, stroke = 0.25, fill = "black") + theme_light() + theme(panel.grid = element_blank(), panel.border = element_blank(), axis.line = element_line(size=0.5), axis.ticks = element_line(size=0.5, color="black"), text = element_text(size = 8, color = "black"), axis.text = element_text(size = 8, color = "black"), plot.title = element_text(size = 8, color = "black")) + xlab("Average LFC") + ylab("Average -log10(p-value)") + geom_point(data = LFC_Rep1_GFP[LFC_Rep1_GFP$Gene.Symbol == "TRIM8",,drop=F], aes(x = Average.LFC, y = Average..log.p.values.), fill = "red", size = 2,  pch=21, stroke = 0.25) + geom_label_repel(data = LFC_Rep1_GFP[LFC_Rep1_GFP$Gene.Symbol == "TRIM8",,drop=F], aes(x = Average.LFC, y = Average..log.p.values., label = Gene.Symbol), size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) + geom_point(data = LFC_Rep1_GFP[grepl("NO_CURRENT", LFC_Rep1_GFP$Gene.Symbol),,drop=F], aes(x = Average.LFC, y = Average..log.p.values.), fill = "gray", size = 2, pch=21, stroke = 0.25) + ggtitle("GFP Rep1") + scale_x_continuous(breaks = seq(-8,8,2))
p
p
# LFC_Rep1_GFP and LFC_Rep2_GFP have stupid excel issues
excel_issues_GFP1 <- LFC_Rep1_GFP$Gene.Symbol[!(LFC_Rep1_GFP$Gene.Symbol %in% LFC_Rep1_mCherry$Gene.Symbol)]
excel_issues_GFP1_guides <- LFC_Rep1_GFP[LFC_Rep1_GFP$Gene.Symbol %in% excel_issues_GFP1, c(1,5)]
excel_issues_GFP2 <- LFC_Rep2_GFP$Gene.Symbol[!(LFC_Rep2_GFP$Gene.Symbol %in% LFC_Rep1_mCherry$Gene.Symbol)]
excel_issues_GFP2_guides <- LFC_Rep2_GFP[LFC_Rep2_GFP$Gene.Symbol %in% excel_issues_GFP2, c(1,5)]
excel_issues_mCherry <- LFC_Rep1_mCherry$Gene.Symbol[!(LFC_Rep1_mCherry$Gene.Symbol %in% LFC_Rep1_GFP$Gene.Symbol)]
excel_issues_mCherry_guides <- LFC_Rep1_mCherry[LFC_Rep1_mCherry$Gene.Symbol %in% excel_issues_mCherry, c(1,5)]
for (i in 1:nrow(excel_issues_GFP1_guides))
{
excel_issues_GFP1_guides[i,3] <- excel_issues_mCherry_guides$Gene.Symbol[grepl(unlist(strsplit(excel_issues_GFP1_guides$Perturbations[i], ";"))[1] , excel_issues_mCherry_guides$Perturbations) & grepl(unlist(strsplit(excel_issues_GFP1_guides$Perturbations[i], ";"))[2] , excel_issues_mCherry_guides$Perturbations) & grepl(unlist(strsplit(excel_issues_GFP1_guides$Perturbations[i], ";"))[3] , excel_issues_mCherry_guides$Perturbations) & grepl(unlist(strsplit(excel_issues_GFP1_guides$Perturbations[i], ";"))[4] , excel_issues_mCherry_guides$Perturbations)]
}
for (i in 1:nrow(excel_issues_GFP2_guides))
{
excel_issues_GFP2_guides[i,3] <- excel_issues_mCherry_guides$Gene.Symbol[grepl(unlist(strsplit(excel_issues_GFP2_guides$Perturbations[i], ";"))[1] , excel_issues_mCherry_guides$Perturbations) & grepl(unlist(strsplit(excel_issues_GFP2_guides$Perturbations[i], ";"))[2] , excel_issues_mCherry_guides$Perturbations) & grepl(unlist(strsplit(excel_issues_GFP2_guides$Perturbations[i], ";"))[3] , excel_issues_mCherry_guides$Perturbations) & grepl(unlist(strsplit(excel_issues_GFP2_guides$Perturbations[i], ";"))[4] , excel_issues_mCherry_guides$Perturbations)]
}
LFC_Rep1_GFP$Gene.Symbol[LFC_Rep1_GFP$Gene.Symbol %in% excel_issues_GFP1_guides$Gene.Symbol] <- excel_issues_GFP1_guides$V3
LFC_Rep2_GFP$Gene.Symbol[LFC_Rep2_GFP$Gene.Symbol %in% excel_issues_GFP2_guides$Gene.Symbol] <- excel_issues_GFP2_guides$V3
LFC_Reps_GFP <- dplyr::full_join(LFC_Rep1_GFP[,c(1,2)], LFC_Rep2_GFP[,c(1,2)], by = "Gene.Symbol")
p <- ggplot(LFC_Reps_GFP, aes(x = Average.LFC.x, y = Average.LFC.y)) + geom_point(size=2, pch=21, stroke = 0.25, fill = "black") + theme_light() + theme(panel.grid = element_blank(), panel.border = element_blank(), axis.line = element_line(size=0.5), axis.ticks = element_line(size=0.5, color="black"), text = element_text(size = 8, color = "black"), axis.text = element_text(size = 8, color = "black"), plot.title = element_text(size = 8, color = "black")) + xlab("Average LFC Rep1") + ylab("Average LFC Rep2") + geom_point(data = LFC_Reps_GFP[LFC_Reps_GFP$Gene.Symbol == "TRIM8",,drop=F], aes(x = Average.LFC.x, y = Average.LFC.y), fill = "red", size = 2,  pch=21, stroke = 0.25) + geom_label_repel(data = LFC_Reps_GFP[LFC_Reps_GFP$Gene.Symbol == "TRIM8",,drop=F], aes(x = Average.LFC.x, y = Average.LFC.y, label = Gene.Symbol), size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) + geom_point(data = LFC_Reps_GFP[grepl("NO_CURRENT", LFC_Reps_GFP$Gene.Symbol),,drop=F], aes(x = Average.LFC.x, y = Average.LFC.y), fill = "gray", size = 2,  pch=21, stroke = 0.25) + ggtitle("GFP Rep Reproducibility") + scale_x_continuous(breaks = seq(-8,8,2)) + scale_y_continuous(breaks = seq(-8,8,2))
p
View(LFC_Reps_GFP)
TableS1 <- readxl::read_xlsx("~/Dropbox (Partners HealthCare)/Paper Drafts, Figures, Files/2021 - TRIM8 in Ewing - Revisions Cancer Cell/Figures_V3/Supplementary Table S1.xlsx")
View(TableS1)
TableS1 %<>% dplyr::group_by(`GENE SYMBOL`) %>%
dplyr::summarise(LFC_Rep1_GFP = mean(`Rep 1;Pre-sort;Day 7 sort`),
LFC_Rep2_GFP = mean(`Rep 2;Pre-sort;Day 7 sort`),
LFC_Rep1_mCherry = mean(`Rep 1;mCherry+;Day 7 sort`),
LFC_Rep1_mCherry = mean(`Rep 2;mCherry+;Day 7 sort`))
TableS1 <- readxl::read_xlsx("~/Dropbox (Partners HealthCare)/Paper Drafts, Figures, Files/2021 - TRIM8 in Ewing - Revisions Cancer Cell/Figures_V3/Supplementary Table S1.xlsx")
TableS1 <- readxl::read_xlsx("~/Dropbox (Partners HealthCare)/Paper Drafts, Figures, Files/2021 - TRIM8 in Ewing - Revisions Cancer Cell/Figures_V3/Supplementary Table S1.xlsx")
TableS1 %<>% dplyr::group_by(`GENE SYMBOL`) %>%
dplyr::summarise(LFC_Rep1_GFP = mean(`Rep 1;Pre-sort;Day 7 sort`),
LFC_Rep2_GFP = mean(`Rep 2;Pre-sort;Day 7 sort`),
LFC_Rep1_mCherry = mean(`Rep 1;mCherry+;Day 7 sort`),
LFC_Rep2_mCherry = mean(`Rep 2;mCherry+;Day 7 sort`))
View(LFC_Rep1_GFP)
TableS1 <- readxl::read_xlsx("~/Dropbox (Partners HealthCare)/Paper Drafts, Figures, Files/2021 - TRIM8 in Ewing - Revisions Cancer Cell/Figures_V3/Supplementary Table S1.xlsx")
log2(0.000000) - log2(4.293013	)
log2(0.000000) - log2(4.293013)
log2(0.0000001) - log2(4.293013)
TableS1$temp <- log2(TableS1$`Rep 1;GFP++;Day 7 sort`) - log2(TableS1$`Ave Pre sort 7`)
View(TableS1)
TableS1$temp <- log2(TableS1$`Rep 1;GFP++;Day 7 sort`)
TableS1$temp2 <- log2(TableS1$`Rep 2;GFP++;Day 7 sort`)
View(TableS1)
TableS1$temp <- log(TableS1$`Rep 1;GFP++;Day 7 sort`)
TableS1$temp2 <- log(TableS1$`Rep 2;GFP++;Day 7 sort`)
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1$temp <- log10(TableS1$`Rep 1;GFP++;Day 7 sort`)
TableS1$temp2 <- log10(TableS1$`Rep 2;GFP++;Day 7 sort`)
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1$temp <- log(TableS1$`Rep 1;GFP++;Day 7 sort`) - log(TableS1$`pDNA plate1`)
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1$temp <- log2(TableS1$`Rep 1;GFP++;Day 7 sort`) - log2(TableS1$`pDNA plate1`)
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1$temp <- log2(TableS1$`Rep 1;GFP++;Day 7 sort`/TableS1$`pDNA plate1`)
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1$temp <- log2(TableS1$`Rep 1;GFP++;Day 7 sort`/mean(TableS1$`pDNA plate1`, TableS1$`pDNA plate1`))
TableS1$temp <- log2(TableS1$`Rep 1;GFP++;Day 7 sort`/ mean(TableS1$`pDNA plate1`, TableS1$`pDNA plate1`))
TableS1$temp <- log2(TableS1$`Rep 1;GFP++;Day 7 sort`/ mean(TableS1$`pDNA plate1`, TableS1$`pDNA;;plate 3`))
TableS1$temp <- (TableS1$`Rep 1;GFP++;Day 7 sort`/ mean(TableS1$`pDNA plate1`, TableS1$`pDNA;;plate 3`))
TableS1$temp <- (mean(TableS1$`pDNA plate1`, TableS1$`pDNA;;plate 3`))
TableS1$temp <- log2(TableS1$`Rep 1;GFP++;Day 7 sort`/ rowMeans(cbind(TableS1$`pDNA plate1`, TableS1$`pDNA plate1`)))
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1$temp <- log(TableS1$`Rep 1;GFP++;Day 7 sort`/ rowMeans(cbind(TableS1$`pDNA plate1`, TableS1$`pDNA plate1`)))
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1$temp <- log10(TableS1$`Rep 1;GFP++;Day 7 sort`/ rowMeans(cbind(TableS1$`pDNA plate1`, TableS1$`pDNA plate1`)))
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1$temp <- log(TableS1$`Rep 1;GFP++;Day 7 sort`/ rowMeans(cbind(TableS1$`pDNA plate1`, TableS1$`pDNA plate1`)))
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1$temp <- log2(TableS1$`Rep 1;GFP++;Day 7 sort`/ rowMeans(cbind(TableS1$`pDNA plate1`, TableS1$`pDNA plate1`)))
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1$temp <- TableS1$`Rep 1;GFP++;Day 7 sort` - TableS1$`Avana-4 Guide Only pDNA`
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1$temp <- (TableS1$`Rep 1;GFP++;Day 7 sort` - TableS1$`Avana-4 Guide Only pDNA`) - (mean(TableS1$`Rep 1;Pre-sort;Day 7 sort`,TableS1$`Rep 2;Pre-sort;Day 7 sort`) - TableS1$`Avana-4 Guide Only pDNA`)
TableS1$temp <- (TableS1$`Rep 1;GFP++;Day 7 sort` - TableS1$`Avana-4 Guide Only pDNA`) - (rowMeans(cbind(TableS1$`Rep 1;Pre-sort;Day 7 sort`,TableS1$`Rep 2;Pre-sort;Day 7 sort`)) - TableS1$`Avana-4 Guide Only pDNA`)
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1 %<>% dplyr::mutate(mean_pre_sort = mean(`Rep 1;Pre-sort;Day 7 sort`, `Rep 2;Pre-sort;Day 7 sort`))
TableS1 <- readxl::read_xlsx("~/Dropbox (Partners HealthCare)/Paper Drafts, Figures, Files/2021 - TRIM8 in Ewing - Revisions Cancer Cell/Figures_V3/Supplementary Table S1.xlsx")
TableS1 %<>% dplyr::mutate(mean_pre_sort = mean(`Rep 1;Pre-sort;Day 7 sort`, `Rep 2;Pre-sort;Day 7 sort`))
TableS1 %<>% dplyr::mutate(mean_pre_sort = average(`Rep 1;Pre-sort;Day 7 sort`, `Rep 2;Pre-sort;Day 7 sort`))
TableS1 %<>% dplyr::group_by(`Construct Barcode`) %>%
dplyr::mutate(mean_pre_sort = mean(`Rep 1;Pre-sort;Day 7 sort`, `Rep 2;Pre-sort;Day 7 sort`))
TableS1 %<>% dplyr::group_by(`Construct Barcode`) %>%
dplyr::mutate(mean_pre_sort = mean(`Rep 1;Pre-sort;Day 7 sort`, `Rep 2;Pre-sort;Day 7 sort`)) %>%
dplyr::mutate(LFC_Rep1_GFP = `Rep 1;GFP++;Day 7 sort` - mean(`Rep 1;Pre-sort;Day 7 sort`, `Rep 2;Pre-sort;Day 7 sort`))
TableS1 %<>% dplyr::group_by(`Construct Barcode`) %>%
dplyr::mutate(mean_pre_sort = mean(`Rep 1;Pre-sort;Day 7 sort`, `Rep 2;Pre-sort;Day 7 sort`)) %>%
dplyr::mutate(LFC_Rep1_GFP = `Rep 1;GFP++;Day 7 sort` - mean_pre_sort) %>%
TableS1 %<>% dplyr::group_by(`GENE SYMBOL`) %>%
dplyr::summarise(LFC_Rep1_GFP = mean(`Rep 1;Pre-sort;Day 7 sort`),
LFC_Rep2_GFP = mean(`Rep 2;Pre-sort;Day 7 sort`),
LFC_Rep1_mCherry = mean(`Rep 1;mCherry+;Day 7 sort`),
LFC_Rep2_mCherry = mean(`Rep 2;mCherry+;Day 7 sort`))
TableS1 %<>% dplyr::group_by(`Construct Barcode`) %>%
dplyr::mutate(mean_pre_sort = mean(`Rep 1;Pre-sort;Day 7 sort`, `Rep 2;Pre-sort;Day 7 sort`)) %>%
dplyr::mutate(LFC_Rep1_GFP = `Rep 1;GFP++;Day 7 sort` - mean_pre_sort)
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1 %<>% dplyr::group_by(`Construct Barcode`) %>%
dplyr::mutate(mean_pre_sort = (`Rep 1;Pre-sort;Day 7 sort` + `Rep 2;Pre-sort;Day 7 sort`)/2) %>%
dplyr::mutate(LFC_Rep1_GFP = `Rep 1;GFP++;Day 7 sort` - mean_pre_sort)
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1 %<>% dplyr::group_by(`Construct Barcode`) %>%
dplyr::mutate(mean_pre_sort = (`Rep 1;Pre-sort;Day 7 sort` + `Rep 2;Pre-sort;Day 7 sort`)/2) %>%
dplyr::mutate(LFC_Rep1_GFP = `Rep 1;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep2_GFP = `Rep 2;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep1_mCherry = `Rep 1;mCherry+;Day 7 sort` - mean_pre_sort,
LFC_Rep2_mCherry = `Rep 2;mCherry+;Day 7 sort` - mean_pre_sort)
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
TableS1 %<>% dplyr::group_by(`GENE SYMBOL`) %>%
dplyr::summarise(LFC_Rep1_GFP = mean(LFC_Rep1_GFP),
LFC_Rep2_GFP = mean(LFC_Rep2_GFP),
LFC_Rep1_mCherry = mean(LFC_Rep1_mCherry),
LFC_Rep2_mCherry = mean(LFC_Rep2_mCherry))
View(TableS1 %>% dplyr::filter(`GENE SYMBOL` == "TRIM8"))
View(LFC_Rep2_GFP)
View(LFC_Rep1_mCherry)
View(LFC_Rep2_mCherry)
View(TableS1)
p <- ggplot(TableS1, aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP)) +
geom_point(size=2, pch=21, stroke = 0.25, fill = "black") +
theme_light() +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.line = element_line(size=0.5), axis.ticks = element_line(size=0.5, color="black"),
text = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black"),
plot.title = element_text(size = 8, color = "black")) +
xlab("Average LFC Rep1") +
ylab("Average LFC Rep2") +
geom_point(data = TableS1[TableS1$`GENE SYMBOL` == "TRIM8",,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP), fill = "red", size = 2,  pch=21, stroke = 0.25) +
geom_label_repel(data = TableS1[TableS1$`GENE SYMBOL` == "TRIM8",,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP, label = `GENE SYMBOL`),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
geom_point(data = TableS1[grepl("NO_CURRENT", TableS1$`GENE SYMBOL`),,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP), fill = "gray", size = 2,  pch=21, stroke = 0.25) +
ggtitle("GFP Rep Reproducibility") +
scale_x_continuous(breaks = seq(-8,8,2)) +
scale_y_continuous(breaks = seq(-8,8,2))
p
TableS1_orig <- readxl::read_xlsx("~/Dropbox (Partners HealthCare)/Paper Drafts, Figures, Files/2021 - TRIM8 in Ewing - Revisions Cancer Cell/Figures_V3/Supplementary Table S1.xlsx")
TableS1_orig %<>% dplyr::group_by(`Construct Barcode`) %>%
dplyr::mutate(mean_pre_sort = (`Rep 1;Pre-sort;Day 7 sort` + `Rep 2;Pre-sort;Day 7 sort`)/2) %>%
dplyr::mutate(LFC_Rep1_GFP = `Rep 1;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep2_GFP = `Rep 2;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep1_mCherry = `Rep 1;mCherry+;Day 7 sort` - mean_pre_sort,
LFC_Rep2_mCherry = `Rep 2;mCherry+;Day 7 sort` - mean_pre_sort)
View(TableS1_orig)
TableS1_orig %>% filter(Gene.Symbol == "NO_CURRENT_1") %$% Pertubations
LFC_Rep1_GFP %>% filter(Gene.Symbol == "NO_CURRENT_1") %$% Pertubations
LFC_Rep1_GFP %>% filter(Gene.Symbol == "NO_CURRENT_1") %$% Perturbations
LFC_Rep1_GFP %>% filter(Gene.Symbol == "NO_CURRENT_2") %$% Perturbations
View(TableS1_orig %>% filter(grepl("NO_CURRENT", `GENE SYMBOL`)) %>% mutate(number = gsub("*._", "", `GENE symbol`)))
View(TableS1_orig %>% filter(grepl("NO_CURRENT", `GENE SYMBOL`)) %>% mutate(number = gsub("*._", "", `GENE SYMBOL`)))
View(TableS1_orig %>% filter(grepl("NO_CURRENT", `GENE SYMBOL`)) %>% mutate(number = gsub(".*_", "", `GENE SYMBOL`)))
View(TableS1_orig %>% filter(grepl("NO_CURRENT", `GENE SYMBOL`)) %>% mutate(number = gsub(".*_", "", `GENE SYMBOL`)) %>% mutate(number = as.numeric(number)))
TableS1 <- readxl::read_xlsx("input_files/Supplementary Table S1.xlsx")
TableS1 %<>% dplyr::group_by(`Construct Barcode`) %>%
dplyr::mutate(mean_pre_sort = (`Rep 1;Pre-sort;Day 7 sort` + `Rep 2;Pre-sort;Day 7 sort`)/2) %>%
dplyr::mutate(LFC_Rep1_GFP = `Rep 1;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep2_GFP = `Rep 2;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep1_mCherry = `Rep 1;mCherry+;Day 7 sort` - mean_pre_sort,
LFC_Rep2_mCherry = `Rep 2;mCherry+;Day 7 sort` - mean_pre_sort)
guide_mapping <- fread("input_files/CP0033_20170705_compat.chip.txt")
View(guide_mapping)
TableS1 %<>% full_join(TableS1, guide_mapping, by=c(`Construct Barcode`, `Guide Sequence`))
TableS1 %<>% full_join(TableS1, guide_mapping, by=c("Construct Barcode", "Guide Sequence"))
guide_mapping <- fread("input_files/CP0033_20170705_compat.chip.txt") %>%
dplyr::rename(`Construct Barcode` = `Guide Sequence`)
TableS1 %<>% dplyr::group_by(`Construct Barcode`) %>%
dplyr::mutate(mean_pre_sort = (`Rep 1;Pre-sort;Day 7 sort` + `Rep 2;Pre-sort;Day 7 sort`)/2) %>%
dplyr::mutate(LFC_Rep1_GFP = `Rep 1;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep2_GFP = `Rep 2;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep1_mCherry = `Rep 1;mCherry+;Day 7 sort` - mean_pre_sort,
LFC_Rep2_mCherry = `Rep 2;mCherry+;Day 7 sort` - mean_pre_sort)
TableS1 %<>% full_join(TableS1, guide_mapping, by="Construct Barcode")
View(TableS1)
TableS1 <- readxl::read_xlsx("input_files/Supplementary Table S1.xlsx")
guide_mapping <- fread("input_files/CP0033_20170705_compat.chip.txt") %>%
dplyr::rename(`Construct Barcode` = `Guide Sequence`)
TableS1 %<>% dplyr::group_by(`Construct Barcode`) %>%
dplyr::mutate(mean_pre_sort = (`Rep 1;Pre-sort;Day 7 sort` + `Rep 2;Pre-sort;Day 7 sort`)/2) %>%
dplyr::mutate(LFC_Rep1_GFP = `Rep 1;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep2_GFP = `Rep 2;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep1_mCherry = `Rep 1;mCherry+;Day 7 sort` - mean_pre_sort,
LFC_Rep2_mCherry = `Rep 2;mCherry+;Day 7 sort` - mean_pre_sort)
View(TableS1)
TableS1 <- readxl::read_xlsx("input_files/Supplementary Table S1.xlsx")
guide_mapping <- fread("input_files/CP0033_20170705_compat.chip.txt") %>%
dplyr::rename(`Construct Barcode` = `Guide Sequence`)
TableS1 %<>% dplyr::group_by(`Construct Barcode`) %>%
dplyr::mutate(mean_pre_sort = (`Rep 1;Pre-sort;Day 7 sort` + `Rep 2;Pre-sort;Day 7 sort`)/2) %>%
dplyr::mutate(LFC_Rep1_GFP = `Rep 1;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep2_GFP = `Rep 2;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep1_mCherry = `Rep 1;mCherry+;Day 7 sort` - mean_pre_sort,
LFC_Rep2_mCherry = `Rep 2;mCherry+;Day 7 sort` - mean_pre_sort)
TableS1 %<>% full_join(TableS1 %>% dplyr::select(-`GENE SYMBOL`), guide_mapping, by="Construct Barcode")
View(TableS1)
TableS1 <- readxl::read_xlsx("input_files/Supplementary Table S1.xlsx")
guide_mapping <- fread("input_files/CP0033_20170705_compat.chip.txt") %>%
dplyr::rename(`Construct Barcode` = `Guide Sequence`)
TableS1 %<>% dplyr::group_by(`Construct Barcode`) %>%
dplyr::mutate(mean_pre_sort = (`Rep 1;Pre-sort;Day 7 sort` + `Rep 2;Pre-sort;Day 7 sort`)/2) %>%
dplyr::mutate(LFC_Rep1_GFP = `Rep 1;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep2_GFP = `Rep 2;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep1_mCherry = `Rep 1;mCherry+;Day 7 sort` - mean_pre_sort,
LFC_Rep2_mCherry = `Rep 2;mCherry+;Day 7 sort` - mean_pre_sort)
TableS1 %<>% full_join(TableS1 %>% dplyr::select(-`GENE SYMBOL`), guide_mapping, by="Construct Barcode")
View(TableS1)
TableS1 <- readxl::read_xlsx("input_files/Supplementary Table S1.xlsx")
guide_mapping <- fread("input_files/CP0033_20170705_compat.chip.txt") %>%
dplyr::rename(`Construct Barcode` = `Guide Sequence`)
TableS1 %<>% dplyr::group_by(`Construct Barcode`) %>%
dplyr::mutate(mean_pre_sort = (`Rep 1;Pre-sort;Day 7 sort` + `Rep 2;Pre-sort;Day 7 sort`)/2) %>%
dplyr::mutate(LFC_Rep1_GFP = `Rep 1;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep2_GFP = `Rep 2;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep1_mCherry = `Rep 1;mCherry+;Day 7 sort` - mean_pre_sort,
LFC_Rep2_mCherry = `Rep 2;mCherry+;Day 7 sort` - mean_pre_sort)
TableS1 %<>% dplyr::full_join(TableS1 %>% dplyr::select(-`GENE SYMBOL`), guide_mapping, by="Construct Barcode")
View(TableS1)
TableS1 <- readxl::read_xlsx("input_files/Supplementary Table S1.xlsx")
guide_mapping <- fread("input_files/CP0033_20170705_compat.chip.txt") %>%
dplyr::rename(`Construct Barcode` = `Guide Sequence`)
TableS1 %<>% dplyr::full_join(TableS1 %>% dplyr::select(-`GENE SYMBOL`), guide_mapping, by="Construct Barcode")
View(TableS1)
TableS1 <- readxl::read_xlsx("input_files/Supplementary Table S1.xlsx")
guide_mapping <- fread("input_files/CP0033_20170705_compat.chip.txt") %>%
dplyr::rename(`Construct Barcode` = `Guide Sequence`)
TableS1 %<>% dplyr::group_by(`Construct Barcode`) %>%
dplyr::mutate(mean_pre_sort = (`Rep 1;Pre-sort;Day 7 sort` + `Rep 2;Pre-sort;Day 7 sort`)/2) %>%
dplyr::mutate(LFC_Rep1_GFP = `Rep 1;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep2_GFP = `Rep 2;GFP++;Day 7 sort` - mean_pre_sort,
LFC_Rep1_mCherry = `Rep 1;mCherry+;Day 7 sort` - mean_pre_sort,
LFC_Rep2_mCherry = `Rep 2;mCherry+;Day 7 sort` - mean_pre_sort)
View(TableS1)
TableS1 <- dplyr::full_join(TableS1 %>% dplyr::select(-`GENE SYMBOL`), guide_mapping, by="Construct Barcode")
View(TableS1)
TableS1 %<>% dplyr::group_by(`Gene Symbol`) %>%
dplyr::summarise(LFC_Rep1_GFP = mean(LFC_Rep1_GFP),
LFC_Rep2_GFP = mean(LFC_Rep2_GFP),
LFC_Rep1_mCherry = mean(LFC_Rep1_mCherry),
LFC_Rep2_mCherry = mean(LFC_Rep2_mCherry))
p <- ggplot(TableS1, aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP)) +
geom_point(size=2, pch=21, stroke = 0.25, fill = "black") +
theme_light() +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.line = element_line(size=0.5), axis.ticks = element_line(size=0.5, color="black"),
text = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black"),
plot.title = element_text(size = 8, color = "black")) +
xlab("Average LFC Rep1") +
ylab("Average LFC Rep2") +
geom_point(data = TableS1[TableS1$`GENE SYMBOL` == "TRIM8",,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP), fill = "red", size = 2,  pch=21, stroke = 0.25) +
geom_label_repel(data = TableS1[TableS1$`GENE SYMBOL` == "TRIM8",,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP, label = `GENE SYMBOL`),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
geom_point(data = TableS1[grepl("NO_CURRENT", TableS1$`GENE SYMBOL`),,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP), fill = "gray", size = 2,  pch=21, stroke = 0.25) +
ggtitle("GFP Rep Reproducibility") +
scale_x_continuous(breaks = seq(-8,8,2)) +
scale_y_continuous(breaks = seq(-8,8,2))
p <- ggplot(TableS1, aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP)) +
geom_point(size=2, pch=21, stroke = 0.25, fill = "black") +
theme_light() +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.line = element_line(size=0.5), axis.ticks = element_line(size=0.5, color="black"),
text = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black"),
plot.title = element_text(size = 8, color = "black")) +
xlab("Average LFC Rep1") +
ylab("Average LFC Rep2") +
geom_point(data = TableS1[TableS1$`Gene Symbol` == "TRIM8",,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP), fill = "red", size = 2,  pch=21, stroke = 0.25) +
geom_label_repel(data = TableS1[TableS1$`Gene Symbol` == "TRIM8",,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP, label = `Gene Symbol`),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
geom_point(data = TableS1[grepl("NO_CURRENT", TableS1$`Gene Symbol`),,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP), fill = "gray", size = 2,  pch=21, stroke = 0.25) +
ggtitle("GFP Rep Reproducibility") +
scale_x_continuous(breaks = seq(-8,8,2)) +
scale_y_continuous(breaks = seq(-8,8,2))
p
p <- ggplot(TableS1, aes(x = LFC_Rep1_mCherry, y = LFC_Rep2_mCherry)) +
geom_point(size=2, pch=21, stroke = 0.25, fill = "black") +
theme_light() +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.line = element_line(size=0.5), axis.ticks = element_line(size=0.5, color="black"),
text = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black"),
plot.title = element_text(size = 8, color = "black")) +
xlab("Average LFC Rep1") +
ylab("Average LFC Rep2") +
geom_point(data = TableS1[TableS1$`Gene Symbol` == "FLI1",,drop=F],
aes(x = LFC_Rep1_mCherry, y = LFC_Rep2_mCherry), fill = "#00aeef", size = 2,  pch=21, stroke = 0.25) +
geom_label_repel(data = TableS1[TableS1$`Gene Symbol` == "FLI1",,drop=F],
aes(x = LFC_Rep1_mCherry, y = LFC_Rep2_mCherry, label = `Gene Symbol`),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
geom_point(data = TableS1[TableS1$`Gene Symbol` == "EWSR1",,drop=F],
aes(x = LFC_Rep1_mCherry, y = LFC_Rep2_mCherry), fill = "purple", size = 2,  pch=21, stroke = 0.25) +
geom_label_repel(data = TableS1[TableS1$`Gene Symbol` == "EWSR1",,drop=F],
aes(x = LFC_Rep1_mCherry, y = LFC_Rep2_mCherry, label = `Gene Symbol`),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
geom_point(data = TableS1[TableS1$`Gene Symbol` == "TRIM8",,drop=F],
aes(x = LFC_Rep1_mCherry, y = LFC_Rep2_mCherry), fill = "red", size = 2,  pch=21, stroke = 0.25) +
geom_label_repel(data = TableS1[TableS1$`Gene Symbol` == "TRIM8",,drop=F],
aes(x = LFC_Rep1_mCherry, y = LFC_Rep2_mCherry, label = `Gene Symbol`),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
geom_point(data = TableS1[grepl("NO_CURRENT", TableS1$`Gene Symbol`),,drop=F],
aes(x = LFC_Rep1_mCherry, y = LFC_Rep2_mCherry), fill = "gray", size = 2,  pch=21, stroke = 0.25) +
ggtitle("mCherry Rep Reproducibility") +
scale_x_continuous(breaks = seq(-8,8,2)) +
scale_y_continuous(breaks = seq(-8,8,2))
p
p <- ggplot(TableS1, aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP)) +
geom_point(size=2, pch=20, stroke = 0, fill = "black") +
theme_light() +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.line = element_line(size=0.5), axis.ticks = element_line(size=0.5, color="black"),
text = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black"),
plot.title = element_text(size = 8, color = "black")) +
xlab("Average LFC Rep1") +
ylab("Average LFC Rep2") +
geom_point(data = TableS1[TableS1$`Gene Symbol` == "TRIM8",,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP), fill = "red", size = 2,  pch=20, stroke = 0) +
geom_label_repel(data = TableS1[TableS1$`Gene Symbol` == "TRIM8",,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP, label = `Gene Symbol`),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
geom_point(data = TableS1[grepl("NO_CURRENT", TableS1$`Gene Symbol`),,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP), fill = "gray", size = 2,  pch=20, stroke = 0) +
ggtitle("GFP Rep Reproducibility") +
scale_x_continuous(breaks = seq(-8,8,2)) +
scale_y_continuous(breaks = seq(-8,8,2))
p
p <- ggplot(TableS1, aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP)) +
geom_point(size=2, pch=20, stroke = 0, color = "black") +
theme_light() +
theme(panel.grid = element_blank(), panel.border = element_blank(),
axis.line = element_line(size=0.5), axis.ticks = element_line(size=0.5, color="black"),
text = element_text(size = 8, color = "black"),
axis.text = element_text(size = 8, color = "black"),
plot.title = element_text(size = 8, color = "black")) +
xlab("Average LFC Rep1") +
ylab("Average LFC Rep2") +
geom_point(data = TableS1[TableS1$`Gene Symbol` == "TRIM8",,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP), color = "red", size = 2,  pch=20, stroke = 0) +
geom_label_repel(data = TableS1[TableS1$`Gene Symbol` == "TRIM8",,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP, label = `Gene Symbol`),
size=2, nudge_x = 0.1, nudge_y = 0.1, fill = rgb(1,1,1,0)) +
geom_point(data = TableS1[grepl("NO_CURRENT", TableS1$`Gene Symbol`),,drop=F],
aes(x = LFC_Rep1_GFP, y = LFC_Rep2_GFP), color = "gray", size = 2,  pch=20, stroke = 0) +
ggtitle("GFP Rep Reproducibility") +
scale_x_continuous(breaks = seq(-8,8,2)) +
scale_y_continuous(breaks = seq(-8,8,2))
p
library(dplyr)
library(ggplot2)
library(ggpubr)
library(ggthemes)
library(magrittr)
library(data.table)
library(DT)
library(clusterProfiler)
source('functions.R')
source('load_data.R')
msigdb <- load_msigdb()
gene_map <- read.table("input_files/gencode.v19_gtfgene_template.txt", sep = "\t", stringsAsFactors = F, header = T)
rownames(gene_map) <- gene_map$Gene
to_convert_gene_names2 <- read.table("input_files/lookup_Refseq_genes.txt", sep = "\t", stringsAsFactors = F, header = T)
rownames(to_convert_gene_names2) <- to_convert_gene_names2$Gene
# RNA-seq data available at GEO GSE150244
TRIM8dT24 <- read.table("data/TRIM8_BN_DM_24h_DESeq2_DESeq2_LFC_apeglm.txt", sep = "\t",
stringsAsFactors = F, header = T, row.names = NULL) %>%
rename(Gene = row.names) %>%
dplyr::mutate(Gene = ifelse(Gene %in% to_convert_gene_names2$Gene, to_convert_gene_names2[Gene, "Symbol_text"], Gene))
gene_map <- read.table("input_files/gencode.v19_gtfgene_template.txt", sep = "\t", stringsAsFactors = F, header = T)
rownames(gene_map) <- gene_map$Gene
to_convert_gene_names2 <- read.table("input_files/lookup_Refseq_genes.txt", sep = "\t", stringsAsFactors = F, header = T)
rownames(to_convert_gene_names2) <- to_convert_gene_names2$Gene
# RNA-seq data available at GEO GSE150244
TRIM8dT24 <- read.table("data/TRIM8_BN_DM_24h_DESeq2_DESeq2_LFC_apeglm.txt", sep = "\t",
stringsAsFactors = F, header = T, row.names = NULL) %>%
dplyr::rename(Gene = row.names) %>%
dplyr::mutate(Gene = ifelse(Gene %in% to_convert_gene_names2$Gene, to_convert_gene_names2[Gene, "Symbol_text"], Gene))
iEF8 <- read.table("data/TRIM8_iEFdox_8h_DESeq2_DESeq2_LFC_apeglm.txt", sep = "\t",
stringsAsFactors = F, header = T, row.names = NULL) %>%
dplyr::rename(Gene.Entrez = row.names) %>%
dplyr::mutate(Gene = gsub("_.*", "", Gene.Entrez)) %>%
dplyr::mutate(Entrez = gsub(".*_", "", Gene.Entrez))
gene_map <- read.table("input_files/gencode.v19_gtfgene_template.txt", sep = "\t", stringsAsFactors = F, header = T)
rownames(gene_map) <- gene_map$Gene
to_convert_gene_names2 <- read.table("input_files/lookup_Refseq_genes.txt", sep = "\t", stringsAsFactors = F, header = T)
rownames(to_convert_gene_names2) <- to_convert_gene_names2$Gene
# RNA-seq data available at GEO GSE150244
TRIM8dT24 <- read.table("data/TRIM8_BN_DM_24h_DESeq2_DESeq2_LFC_apeglm.txt", sep = "\t",
stringsAsFactors = F, header = T, row.names = NULL) %>%
dplyr::rename(Gene = row.names) %>%
dplyr::mutate(Gene = ifelse(Gene %in% to_convert_gene_names2$Gene, to_convert_gene_names2[Gene, "Symbol_text"], Gene))
iEF8 <- read.table("data/TRIM8_iEFdox_8h_DESeq2_DESeq2_LFC_apeglm.txt", sep = "\t",
stringsAsFactors = F, header = T, row.names = NULL) %>%
dplyr::rename(Gene.Entrez = row.names) %>%
dplyr::mutate(Gene = gsub("_.*", "", Gene.Entrez)) %>%
dplyr::mutate(Entrez = gsub(".*_", "", Gene.Entrez))
genes_selected <- as.vector(unlist(TRIM8dT24 %>% filter(padj < 0.05 & log2FoldChange > 0) %>% dplyr::select(Gene)))
over_res <- enricher(gene = genes_selected,
universe = as.vector(unlist(all_two_groups %>% dplyr::select(Gene))),
TERM2GENE = msigdb$C2,
pvalueCutoff = Inf, qvalueCutoff = Inf)
over_res@result %<>% group_by(GeneRatio) %>%
dplyr::mutate(GeneRatio2 = eval(parse(text=GeneRatio)),
BgRatio2 = eval(parse(text=BgRatio)),
RatioDiff = GeneRatio2 - BgRatio2) %>%
dplyr::mutate(HighlightSig = ifelse(`p.adjust` < 1e-10, "SIG", "OTHER")) %>%
dplyr::mutate(HighlightSig = factor(HighlightSig, levels = c("OTHER", "SIG")))
msigdb$C2
msigdb[[C2]]
msigdb[["C2"]]
over_res <- enricher(gene = genes_selected,
universe = as.vector(unlist(all_two_groups %>% dplyr::select(Gene))),
TERM2GENE = msigdb$C2,
pvalueCutoff = Inf, qvalueCutoff = Inf)
msigdb$C2
as.matrix(msigdb$C2)
as.data.frame(msigdb$C2)
over_res <- enricher(gene = genes_selected,
universe = as.vector(unlist(all_two_groups %>% dplyr::select(Gene))),
TERM2GENE = as.data.frame(msigdb$C2),
pvalueCutoff = Inf, qvalueCutoff = Inf)
all_genes <- unique(as.vector(unlist(TRIM8dT24 %>% dplyr::select(Gene), unlist(iEF8 %>% dplyr::select(Gene))))
)
all_genes <- unique(as.vector(unlist(TRIM8dT24 %>% dplyr::select(Gene), unlist(iEF8 %>% dplyr::select(Gene)))))
over_res <- enricher(gene = genes_selected,
universe = all_genes,
TERM2GENE = msigdb$C2,
pvalueCutoff = Inf, qvalueCutoff = Inf)
over_res <- enricher(gene = genes_selected,
universe = all_genes,
TERM2GENE = msigdb$C2,
pvalueCutoff = Inf, qvalueCutoff = Inf)
gsc_data <- readRDS(download.raw.from.taiga(data.name='msigdb-gene-set-collections-8453', data.version=4, data.file='gsc_data_term2gene'))
c2 <- read.table(file = "~/Downloads/c2.all.v7.0.symbols.gmt", sep = ",")
c2_table <- NULL
for (i in 1:dim(c2)[1])
{
c2_data <- unlist(strsplit(c2[i,], "\t"))
c2_table <- rbind(c2_table, cbind(c2_data[1], c2_data[3:length(c2_data)]))
}
colnames(c2_table) <- c("term", "gene")
gsc_data$MSigDB_C2 <- as_tibble(c2_table)
over_res <- enricher(gene = genes_selected,
universe = all_genes,
TERM2GENE = sc_data$MSigDB_C2,
pvalueCutoff = Inf, qvalueCutoff = Inf)
over_res <- enricher(gene = genes_selected,
universe = all_genes,
TERM2GENE = gsc_data$MSigDB_C2,
pvalueCutoff = Inf, qvalueCutoff = Inf)
View(gsc_data)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(ggthemes)
library(magrittr)
library(data.table)
library(DT)
library(clusterProfiler)
source('functions.R')
source('load_data.R')
msigdb <- load_msigdb()
gene_map <- read.table("input_files/gencode.v19_gtfgene_template.txt", sep = "\t", stringsAsFactors = F, header = T)
rownames(gene_map) <- gene_map$Gene
to_convert_gene_names2 <- read.table("input_files/lookup_Refseq_genes.txt", sep = "\t", stringsAsFactors = F, header = T)
rownames(to_convert_gene_names2) <- to_convert_gene_names2$Gene
# RNA-seq data available at GEO GSE150244
TRIM8dT24 <- read.table("data/TRIM8_BN_DM_24h_DESeq2_DESeq2_LFC_apeglm.txt", sep = "\t",
stringsAsFactors = F, header = T, row.names = NULL) %>%
dplyr::rename(Gene = row.names) %>%
dplyr::mutate(Gene = ifelse(Gene %in% to_convert_gene_names2$Gene, to_convert_gene_names2[Gene, "Symbol_text"], Gene))
iEF8 <- read.table("data/TRIM8_iEFdox_8h_DESeq2_DESeq2_LFC_apeglm.txt", sep = "\t",
stringsAsFactors = F, header = T, row.names = NULL) %>%
dplyr::rename(Gene.Entrez = row.names) %>%
dplyr::mutate(Gene = gsub("_.*", "", Gene.Entrez)) %>%
dplyr::mutate(Entrez = gsub(".*_", "", Gene.Entrez))
all_genes <- unique(as.vector(unlist(TRIM8dT24 %>% dplyr::select(Gene), unlist(iEF8 %>% dplyr::select(Gene)))))
genes_selected <- as.vector(unlist(TRIM8dT24 %>% filter(padj < 0.05 & log2FoldChange > 0) %>% dplyr::select(Gene)))
over_res <- enricher(gene = genes_selected,
universe = all_genes,
TERM2GENE = msigdb$C2,
pvalueCutoff = Inf, qvalueCutoff = Inf)
over_res <- enricher(gene = genes_selected,
universe = all_genes,
TERM2GENE = msigdb,
pvalueCutoff = Inf, qvalueCutoff = Inf)
msigdb <- load_msigdb()
over_res <- enricher(gene = genes_selected,
universe = all_genes,
TERM2GENE = msigdb,
pvalueCutoff = Inf, qvalueCutoff = Inf)
over_res@result %<>% group_by(GeneRatio) %>%
dplyr::mutate(GeneRatio2 = eval(parse(text=GeneRatio)),
BgRatio2 = eval(parse(text=BgRatio)),
RatioDiff = GeneRatio2 - BgRatio2) %>%
dplyr::mutate(HighlightSig = ifelse(`p.adjust` < 1e-10, "SIG", "OTHER")) %>%
dplyr::mutate(HighlightSig = factor(HighlightSig, levels = c("OTHER", "SIG")))
f2 <- ggplot(over_res@result %>% arrange(HighlightSig), aes(x=GeneRatio2, y=-log10(p.adjust), text=ID, color=HighlightSig)) +
geom_point(size = 3) +
scale_color_manual(values = c("OTHER" = rgb(190/255, 190/255, 190/255, 0.5),
"SIG" = "red"),
name = "MSigDB C2") +
geom_hline(yintercept = 12, linetype="dashed") +
geom_text_repel(data = over_res@result %>% filter(grepl("SIG",HighlightSig)),
mapping = aes(x=GeneRatio2, y=-log10(p.adjust), label=ID), nudge_y = -3) +
ggtitle(paste0("Enriched genesets in MSigDB C2\nTRIM8dT 24h (",
length(genes_selected),
" genes)")) +
xlab("GeneRatio") +
theme_Publication() + theme(legend.position = "none", legend.direction = "vertical",
legend.text = element_text(size = 8), panel.grid = element_blank())
f2
genes_selected <- as.vector(unlist(iEF8 %>% filter(padj < 0.05 & log2FoldChange > 0) %>% dplyr::select(Gene)))
over_res <- enricher(gene = genes_selected,
universe = as.vector(unlist(all_two_groups %>% dplyr::select(Gene))),
TERM2GENE = msigdb$C2,
pvalueCutoff = Inf, qvalueCutoff = Inf)
over_res <- enricher(gene = genes_selected,
universe = all_genes,
TERM2GENE = msigdb,
pvalueCutoff = Inf, qvalueCutoff = Inf)
over_res@result %<>% group_by(GeneRatio) %>%
dplyr::mutate(GeneRatio2 = eval(parse(text=GeneRatio)),
BgRatio2 = eval(parse(text=BgRatio)),
RatioDiff = GeneRatio2 - BgRatio2) %>%
dplyr::mutate(HighlightSig = ifelse(`p.adjust` < 1e-11, "SIG", "OTHER")) %>%
dplyr::mutate(HighlightSig = factor(HighlightSig, levels = c("OTHER", "SIG")))
f2 <- ggplot(over_res@result %>% arrange(HighlightSig), aes(x=GeneRatio2, y=-log10(p.adjust), text=ID, color=HighlightSig)) +
geom_point(size = 3) +
scale_color_manual(values = c("OTHER" = rgb(190/255, 190/255, 190/255, 0.5),
"SIG" = "red"),
name = "MSigDB C2") +
geom_hline(yintercept = 12, linetype="dashed") +
geom_text_repel(data = over_res@result %>% filter(grepl("SIG",HighlightSig)),
mapping = aes(x=GeneRatio2, y=-log10(p.adjust), label=ID), nudge_y = -3) +
ggtitle(paste0("Enriched genesets in MSigDB C2\niEF 8h (",
length(genes_selected),
" genes)")) +
xlab("GeneRatio") +
theme_Publication() + theme(legend.position = "none", legend.direction = "vertical",
legend.text = element_text(size = 8), panel.grid = element_blank())
f2
p <- ggplot(TRIM8dT24, aes(x=log2FoldChange, y=-log10(padj), color=(padj < 0.05), text=Gene)) +
geom_point() +
geom_hline(yintercept = -log10(0.05), linetype = "dashed") +
ggtitle("TRIM8dT 24h") +
coord_cartesian(clip = "off") +
scale_colour_manual(values = c("gray", "red"), name = "DMSO mean TPM") +
theme_Publication() + theme(legend.position = "none", legend.direction = "vertical",
legend.text = element_text(size=6), legend.background = element_blank(), panel.grid = element_blank())
p
View(TRIM8dT24)
View(gene_map)
View(to_convert_gene_names2)
View(gene_map)
genes_selected <- as.vector(unlist(TRIM8dT24 %>% filter(padj < 0.05 & log2FoldChange > 0) %>% dplyr::select(Gene)))
over_res <- enricher(gene = genes_selected,
universe = gene_map$Symbol,
TERM2GENE = msigdb,
pvalueCutoff = Inf, qvalueCutoff = Inf)
over_res@result %<>% group_by(GeneRatio) %>%
dplyr::mutate(GeneRatio2 = eval(parse(text=GeneRatio)),
BgRatio2 = eval(parse(text=BgRatio)),
RatioDiff = GeneRatio2 - BgRatio2) %>%
dplyr::mutate(HighlightSig = ifelse(`p.adjust` < 1e-10, "SIG", "OTHER")) %>%
dplyr::mutate(HighlightSig = factor(HighlightSig, levels = c("OTHER", "SIG")))
f2 <- ggplot(over_res@result %>% arrange(HighlightSig), aes(x=GeneRatio2, y=-log10(p.adjust), text=ID, color=HighlightSig)) +
geom_point(size = 3) +
scale_color_manual(values = c("OTHER" = "black",
"SIG" = "red"),
name = "MSigDB C2") +
geom_hline(yintercept = 12, linetype="dashed") +
geom_text_repel(data = over_res@result %>% filter(grepl("SIG",HighlightSig)),
mapping = aes(x=GeneRatio2, y=-log10(p.adjust), label=ID), nudge_y = -3) +
ggtitle(paste0("Enriched genesets in MSigDB C2\nTRIM8dT 24h (",
length(genes_selected),
" genes)")) +
xlab("GeneRatio") +
theme_Publication() + theme(legend.position = "none", legend.direction = "vertical",
legend.text = element_text(size = 8), panel.grid = element_blank())
f2
genes_selected <- as.vector(unlist(iEF8 %>% filter(padj < 0.05 & log2FoldChange > 0) %>% dplyr::select(Gene)))
over_res <- enricher(gene = genes_selected,
universe = gene_map$Symbol,
TERM2GENE = msigdb,
pvalueCutoff = Inf, qvalueCutoff = Inf)
over_res@result %<>% group_by(GeneRatio) %>%
dplyr::mutate(GeneRatio2 = eval(parse(text=GeneRatio)),
BgRatio2 = eval(parse(text=BgRatio)),
RatioDiff = GeneRatio2 - BgRatio2) %>%
dplyr::mutate(HighlightSig = ifelse(`p.adjust` < 1e-11, "SIG", "OTHER")) %>%
dplyr::mutate(HighlightSig = factor(HighlightSig, levels = c("OTHER", "SIG")))
f2 <- ggplot(over_res@result %>% arrange(HighlightSig), aes(x=GeneRatio2, y=-log10(p.adjust), text=ID, color=HighlightSig)) +
geom_point(size = 3) +
scale_color_manual(values = c("OTHER" = "black",
"SIG" = "red"),
name = "MSigDB C2") +
geom_hline(yintercept = 12, linetype="dashed") +
geom_text_repel(data = over_res@result %>% filter(grepl("SIG",HighlightSig)),
mapping = aes(x=GeneRatio2, y=-log10(p.adjust), label=ID), nudge_y = -3) +
ggtitle(paste0("Enriched genesets in MSigDB C2\niEF 8h (",
length(genes_selected),
" genes)")) +
xlab("GeneRatio") +
theme_Publication() + theme(legend.position = "none", legend.direction = "vertical",
legend.text = element_text(size = 8), panel.grid = element_blank())
f2
genes_selected <- as.vector(unlist(TRIM8dT24 %>% filter(padj < 0.05 & log2FoldChange > 0) %>% dplyr::select(Gene)))
over_res <- enricher(gene = genes_selected,
universe = gene_map$Symbol,
TERM2GENE = msigdb,
pvalueCutoff = Inf, qvalueCutoff = Inf)
over_res@result %<>% group_by(GeneRatio) %>%
dplyr::mutate(GeneRatio2 = eval(parse(text=GeneRatio)),
BgRatio2 = eval(parse(text=BgRatio)),
RatioDiff = GeneRatio2 - BgRatio2) %>%
dplyr::mutate(HighlightSig = ifelse(`p.adjust` < 1e-10, "SIG", "OTHER")) %>%
dplyr::mutate(HighlightSig = factor(HighlightSig, levels = c("OTHER", "SIG")))
f2 <- ggplot(over_res@result %>% arrange(HighlightSig), aes(x=GeneRatio2, y=-log10(p.adjust), text=ID, color=HighlightSig)) +
geom_point(size = 3) +
scale_color_manual(values = c("OTHER" = "black",
"SIG" = "red"),
name = "MSigDB C2") +
geom_hline(yintercept = 12, linetype="dashed") +
geom_text_repel(data = over_res@result %>% filter(grepl("SIG",HighlightSig)),
mapping = aes(x=GeneRatio2, y=-log10(p.adjust), label=ID), nudge_y = -3) +
ggtitle(paste0("Enriched genesets in MSigDB C2\nTRIM8dT 24h (",
length(genes_selected),
" genes)")) +
xlab("GeneRatio") +
theme_Publication() + theme(legend.position = "none", legend.direction = "vertical",
legend.text = element_text(size = 8), panel.grid = element_blank())
f2
genes_selected <- as.vector(unlist(TRIM8dT24 %>% filter(padj < 0.05 & log2FoldChange > 0) %>% dplyr::select(Gene)))
over_res <- enricher(gene = genes_selected,
universe = gene_map$Symbol,
TERM2GENE = msigdb,
pvalueCutoff = Inf, qvalueCutoff = Inf)
over_res@result %<>% group_by(GeneRatio) %>%
dplyr::mutate(GeneRatio2 = eval(parse(text=GeneRatio)),
BgRatio2 = eval(parse(text=BgRatio)),
RatioDiff = GeneRatio2 - BgRatio2) %>%
dplyr::mutate(HighlightSig = ifelse(`p.adjust` < 1e-20, "SIG", "OTHER")) %>%
dplyr::mutate(HighlightSig = factor(HighlightSig, levels = c("OTHER", "SIG")))
f2 <- ggplot(over_res@result %>% arrange(HighlightSig), aes(x=GeneRatio2, y=-log10(p.adjust), text=ID, color=HighlightSig)) +
geom_point(size = 3) +
scale_color_manual(values = c("OTHER" = "black",
"SIG" = "red"),
name = "MSigDB C2") +
geom_hline(yintercept = 20, linetype="dashed") +
geom_text_repel(data = over_res@result %>% filter(grepl("SIG",HighlightSig)),
mapping = aes(x=GeneRatio2, y=-log10(p.adjust), label=ID), nudge_y = -3) +
ggtitle(paste0("Enriched genesets in MSigDB C2\nTRIM8dT 24h (",
length(genes_selected),
" genes)")) +
xlab("GeneRatio") +
theme_Publication() + theme(legend.position = "none", legend.direction = "vertical",
legend.text = element_text(size = 8), panel.grid = element_blank())
f2
genes_selected <- as.vector(unlist(iEF8 %>% filter(padj < 0.05 & log2FoldChange > 0) %>% dplyr::select(Gene)))
over_res <- enricher(gene = genes_selected,
universe = gene_map$Symbol,
TERM2GENE = msigdb,
pvalueCutoff = Inf, qvalueCutoff = Inf)
over_res@result %<>% group_by(GeneRatio) %>%
dplyr::mutate(GeneRatio2 = eval(parse(text=GeneRatio)),
BgRatio2 = eval(parse(text=BgRatio)),
RatioDiff = GeneRatio2 - BgRatio2) %>%
dplyr::mutate(HighlightSig = ifelse(`p.adjust` < 1e-20, "SIG", "OTHER")) %>%
dplyr::mutate(HighlightSig = factor(HighlightSig, levels = c("OTHER", "SIG")))
f2 <- ggplot(over_res@result %>% arrange(HighlightSig), aes(x=GeneRatio2, y=-log10(p.adjust), text=ID, color=HighlightSig)) +
geom_point(size = 3) +
scale_color_manual(values = c("OTHER" = "black",
"SIG" = "red"),
name = "MSigDB C2") +
geom_hline(yintercept = 20, linetype="dashed") +
geom_text_repel(data = over_res@result %>% filter(grepl("SIG",HighlightSig)),
mapping = aes(x=GeneRatio2, y=-log10(p.adjust), label=ID), nudge_y = -3) +
ggtitle(paste0("Enriched genesets in MSigDB C2\niEF 8h (",
length(genes_selected),
" genes)")) +
xlab("GeneRatio") +
theme_Publication() + theme(legend.position = "none", legend.direction = "vertical",
legend.text = element_text(size = 8), panel.grid = element_blank())
f2
